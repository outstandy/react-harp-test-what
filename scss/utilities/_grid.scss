//Widths
$widths: (
  'x-large': 1440px,
  'large' : 1280px,
  'med' : 1024px,
  'small' : 768px,
  'x-small' : 320px
);

@function width($key) {
  @if map-has-key($widths, $key) {
    @return map-get($widths, $key);
  }

  @warn "Unknown `#{$key}` in $widths.";
  @return null;
}

//Breakpoints
$breakpoints: (
  'x-large': min-width(1281px),
  'large' : max-width(1280px),
  'med' : max-width(1024px),
  'small' : max-width(768px),
  'x-small' :max-width(320px)
);

@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

//Grid Dimensions
$num-col-lrg: 12;
$num-col-med: 6;
$num-col-sml: 4;
$gutter: 30px;

.clearfix {
  &:after {
   content: " ";
   display: block;
   height: 0;
   clear: both;
 }
}

.row {
  @extend .clearfix;
  @include respond-to('large'){

  };
}

.column {
  position: relative;
  float: left;
  padding-left: $gutter/2;
  padding-right: $gutter/2;
  &.no-overflow {
    overflow: hidden;
  }
  &.no-pad {
    padding-left: 0;
    padding-right: 0;
  }
}

.grid-1-1 {
  width: 100%;
}

.grid-1-2 {
  width: 50%;
  @include respond-to('med') {
    background-color: blue;
  }
}

.lrg-4 {
  @include respond-to('large') {
    width: 33%
  }
}
.lrg-2 {
  @include respond-to('large') {
    width: (100%/$num-col-lrg);
  }
}
